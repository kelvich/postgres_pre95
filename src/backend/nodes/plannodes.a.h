extern void set_cost ARGS((Plan node, Cost value));
extern Cost get_cost ARGS((Plan node));
extern void set_fragment ARGS((Plan node, Index value));
extern Index get_fragment ARGS((Plan node));
extern void set_state ARGS((Plan node, struct EState *value));
extern struct EState *get_state ARGS((Plan node));
extern void set_qptargetlist ARGS((Plan node, List value));
extern List get_qptargetlist ARGS((Plan node));
extern void set_qpqual ARGS((Plan node, List value));
extern List get_qpqual ARGS((Plan node));
extern void set_lefttree ARGS((Plan node, struct Plan *value));
extern struct Plan *get_lefttree ARGS((Plan node));
extern void set_righttree ARGS((Plan node, struct Plan *value));
extern struct Plan *get_righttree ARGS((Plan node));
extern void set_exstate ARGS((Existential node, ExistentialState value));
extern ExistentialState get_exstate ARGS((Existential node));
extern void set_resrellevelqual ARGS((Result node, List value));
extern List get_resrellevelqual ARGS((Result node));
extern void set_resconstantqual ARGS((Result node, List value));
extern List get_resconstantqual ARGS((Result node));
extern void set_resstate ARGS((Result node, ResultState value));
extern ResultState get_resstate ARGS((Result node));
extern void set_unionplans ARGS((Append node, List value));
extern List get_unionplans ARGS((Append node));
extern void set_unionrelid ARGS((Append node, Index value));
extern Index get_unionrelid ARGS((Append node));
extern void set_unionrtentries ARGS((Append node, List value));
extern List get_unionrtentries ARGS((Append node));
extern void set_unionstate ARGS((Append node, AppendState value));
extern AppendState get_unionstate ARGS((Append node));
extern void set_nlstate ARGS((NestLoop node, NestLoopState value));
extern NestLoopState get_nlstate ARGS((NestLoop node));
extern void set_mergeclauses ARGS((MergeSort node, List value));
extern List get_mergeclauses ARGS((MergeSort node));
extern void set_mergesortop ARGS((MergeSort node, ObjectId value));
extern ObjectId get_mergesortop ARGS((MergeSort node));
extern void set_hashclauses ARGS((HashJoin node, List value));
extern List get_hashclauses ARGS((HashJoin node));
extern void set_hashjoinop ARGS((HashJoin node, ObjectId value));
extern ObjectId get_hashjoinop ARGS((HashJoin node));
extern void set_scanrelid ARGS((Scan node, Index value));
extern Index get_scanrelid ARGS((Scan node));
extern void set_scanstate ARGS((Scan node, ScanState value));
extern ScanState get_scanstate ARGS((Scan node));
extern void set_indxid ARGS((IndexScan node, List value));
extern List get_indxid ARGS((IndexScan node));
extern void set_indxqual ARGS((IndexScan node, List value));
extern List get_indxqual ARGS((IndexScan node));
extern void set_indxstate ARGS((IndexScan node, IndexScanState value));
extern IndexScanState get_indxstate ARGS((IndexScan node));
extern void set_tempid ARGS((Temp node, ObjectId value));
extern ObjectId get_tempid ARGS((Temp node));
extern void set_keycount ARGS((Temp node, Count value));
extern Count get_keycount ARGS((Temp node));
extern void set_sortstate ARGS((Sort node, SortState value));
extern SortState get_sortstate ARGS((Sort node));
extern Plan MakePlan ARGS((Cost cost, Index fragment, struct EState *state, List qptargetlist, List qpqual, struct Plan *lefttree, struct Plan *righttree));
extern void PrintPlan ARGS((Plan node));
extern bool EqualPlan ARGS((Plan a, Plan b));
extern Existential MakeExistential ARGS((ExistentialState exstate));
extern void PrintExistential ARGS((Existential node));
extern bool EqualExistential ARGS((Existential a, Existential b));
extern Result MakeResult ARGS((List resrellevelqual, List resconstantqual, ResultState resstate));
extern void PrintResult ARGS((Result node));
extern bool EqualResult ARGS((Result a, Result b));
extern Append MakeAppend ARGS((List unionplans, Index unionrelid, List unionrtentries, AppendState unionstate));
extern void PrintAppend ARGS((Append node));
extern bool EqualAppend ARGS((Append a, Append b));
extern Join MakeJoin ARGS((int unionplans));
extern void PrintJoin ARGS((Join node));
extern bool EqualJoin ARGS((Join a, Join b));
extern NestLoop MakeNestLoop ARGS((NestLoopState nlstate));
extern void PrintNestLoop ARGS((NestLoop node));
extern bool EqualNestLoop ARGS((NestLoop a, NestLoop b));
extern MergeSort MakeMergeSort ARGS((List mergeclauses, ObjectId mergesortop));
extern void PrintMergeSort ARGS((MergeSort node));
extern bool EqualMergeSort ARGS((MergeSort a, MergeSort b));
extern HashJoin MakeHashJoin ARGS((List hashclauses, ObjectId hashjoinop));
extern void PrintHashJoin ARGS((HashJoin node));
extern bool EqualHashJoin ARGS((HashJoin a, HashJoin b));
extern Scan MakeScan ARGS((Index scanrelid, ScanState scanstate));
extern void PrintScan ARGS((Scan node));
extern bool EqualScan ARGS((Scan a, Scan b));
extern SeqScan MakeSeqScan ARGS((int scanrelid));
extern void PrintSeqScan ARGS((SeqScan node));
extern bool EqualSeqScan ARGS((SeqScan a, SeqScan b));
extern IndexScan MakeIndexScan ARGS((List indxid, List indxqual, IndexScanState indxstate));
extern void PrintIndexScan ARGS((IndexScan node));
extern bool EqualIndexScan ARGS((IndexScan a, IndexScan b));
extern Temp MakeTemp ARGS((ObjectId tempid, Count keycount));
extern void PrintTemp ARGS((Temp node));
extern bool EqualTemp ARGS((Temp a, Temp b));
extern Sort MakeSort ARGS((SortState sortstate));
extern void PrintSort ARGS((Sort node));
extern bool EqualSort ARGS((Sort a, Sort b));
extern Hash MakeHash ARGS((int sortstate));
extern void PrintHash ARGS((Hash node));
extern bool EqualHash ARGS((Hash a, Hash b));
