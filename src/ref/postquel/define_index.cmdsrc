.\" This is -*-nroff-*-
.\" XXX standard disclaimer belongs here....
.\" $Header$
.TH "DEFINE INDEX" COMMANDS 01/23/93
.XA 2 "Define Index"
.SH NAME
define index \(em construct a secondary index
.SH SYNOPSIS
.(l M
\fBdefine\fR [\fBarchive\fR] \fBindex\fR index-name
	\fBon\fR classname \fBusing\fR am-name
	\fB(\fR attname\-1 type_class\-1 { , attname\-i type_class\-i } \fB)\fR
.)l
.SH DESCRIPTION
This command constructs an index called
.IR index-name.
If the
.BR archive
keyword is absent,
the
.IR classname
class is indexed.  When
.BR archive
is present, an index is created on the archive class associated with
the
.IR classname
class.
.PP
.IR Am-name
is the name of the access method which is used for the index.
.PP
The key fields for the index are specified as a collection of
attribute names and associated
.IR "operator classes" .
An operator class is used to specify the operators to be used for a
particular index.  For example, a btree index on four-byte integers
would use the
.IR int4_ops
class; this operator class includes comparison functions for four-byte
integers.
.PP
\*(PG Version \*(PV provides btree and rtree access methods for
secondary indices.  The operator classes defined on btrees are
.(C
int2_ops	char_ops
int4_ops	char16_ops
int24_ops	oid_ops
int42_ops	text_ops
float4_ops	abstime_ops
float8_ops
.)C
The
.IR int24_ops
operator class is useful for constructing indices on int2 data, and
doing comparisons against int4 data in query qualifications.
Similarly,
.IR int42_ops
support indices on int4 data that is to be compared against int2 data
in queries.
.PP
The \*(PG query optimizer will consider using btree indices in a scan
whenever an indexed attribute is involved in a comparison using one of
.(C
<    <=    =    >=    >
.)C
.PP
The operator classes defined on rtrees are
.(C
box_ops
bigbox_ops
poly_ops
.)C
Both box classes support indices on the
.q box
datatype in \*(PG.  The difference between them is that
.IR bigbox_ops
scales box coordinates down, to avoid floating point exceptions from
doing multiplication, addition, and subtraction on very large
floating-point coordinates.  If the field on which your rectangles lie
is about 20,000 units square or larger, you should use
.IR bigbox_ops .
The
.IR poly_ops
operator class supports rtree indices on
.q polygon
data.
.PP
The \*(PG query optimizer will consider using an rtree index whenever
an indexed attribute is involved in a comparison using one of
.(C
<<    &<    &>    >>    @    ~=    &&
.)C
.SH EXAMPLES
.(C
/*
 * Create a btree index on the emp class using the age attribute.
 */
define index empindex on emp using btree (age int4_ops)
.)C
.(C
/*
 * Create a btree index on employee name.
 */
define index empname
	on emp using btree (name char16_ops)
.)C
.(C
/*
 * Create an rtree index on the bounding rectangle of cities.
 */
define index cityrect
	on city using rtree (boundbox box_ops)
.)C
.SH BUGS
Archive indices are not supported in Version \*(PV.
.PP
There should be an access method designer's guide.
.PP
Indices may only be defined on a single key.  This can be hacked
around by defining composite types and using the \*(PG support for
indices on functional values of attributes.
