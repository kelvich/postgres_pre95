.\" XXX standard disclaimer belongs here....
.\" $Header$
.SP "DEFINE INDEX" COMMANDS 6/14/90
.XA 2 "Define Index"
.uh NAME
.lp
define index \*- construct a secondary index
.uh SYNOPSIS
.lp
.b define
[
.b archive
]
.b index
index-name
.b on
classname
.b using
am-name
.b (
attname\-1
type_class\-1
{ , attname\-i
type_class\-i }
.b )
.uh DESCRIPTION
.lp
This command constructs an index
called
.i index-name.
If the
.b archive
keyword is absent,
the
.i classname
class is indexed.
When
.b archive
is present,
an index is created
on the archive class associated with the
.i classname
class.
.lp
.i Am-name
is the name of the access method which is used for the index.
.lp
The key fields for the index are specified as a collection of
attribute names and associated
.i "operator classes" .
An operator class is used to specify the operators
to be used for a particular index.
For example,
a btree index on four-byte integers would use the
.i int4_ops
class;
this operator class includes comparison functions for
four-byte integers.
.lp
\*(PP release 3.0 provides btree and rtree access methods
for secondary indices.
The operator classes defined on btrees are
.(l
int2_ops	char_ops
int4_ops	char16_ops
int24_ops	oid_ops
int42_ops	text_ops
floag4_ops	abstime_ops
float8_ops
.)l
The
.i int24_ops
operator class is useful for constructing indices on int2 data,
and doing comparisons against int4 data in query qualifications.
Similarly,
.i int42_ops
support indices on int4 data that is to be compared against int2
data in queries.
.lp
The operator classes defined on rtrees are
.(l
box_ops	poly_ops
bigbox_ops
.)l
Both of these support indices on the
.q box
datatype in \*(PP.
The difference between them is that
.i bigbox_ops
scales box coordinates down,
to avoid floating point exceptions from doing
multiplication,
addition,
and subtraction on very large floating-point coordinates.
If the field on which your rectangles lie is about 20,000
units square or larger,
you should use
.i bigbox_ops .
The
.i poly_ops
operator class supports rtree indices on
.q polygon
data.
.uh EXAMPLES
.lp
Create a btree index on the emp class using the age attribute.
.(b
define index empindex on emp using btree (age int4_ops)
.)b
.lp
Create a btree index on employee name.
.(b
define index empname on emp using btree (name char16_ops)
.)b
.lp
Create an rtree index on the bounding rectangle of cities.
.(b
define index cityrect on city using rtree (boundbox box_ops)
.)b
.uh BUGS
.lp
Archive indices are not supported in Version 2.1.
.lp
There should be an access method designers guide.
.lp
Indices may only be defined on a single key.
