.\" XXX standard disclaimer belongs here....
.\" $Header$
.SP CREATE COMMANDS 6/14/90
.XA 2 Create
.uh NAME
.lp
create \*- create a new class
.uh SYNOPSIS
.lp
.b create
classname (attributename = type
{ , attributename = type})
[key (attributename [[using] operator] { , attributename [[using] operator])]
[inherits (classname { , classname}]
[archive_mode]
.uh DESCRIPTION
.lp
.b Create
will enter a new class into the current data base.
The class will be 
.q "owned"
by the user issueing the command.
The name of the class is
\fIclassname\fR
and the attributes are as specified in the list of
\fIattributenames:\fR
\fIattributename, attributename,\fR
etc.
The attributes are created with the type specified by
\fItype.\fR
.lp
The \fIkey\fR clause is used to specify that a field or a collection
of fields is unique.
If no key clause is specified, \*(PP will still give every instance
a unique object-id
.r ( \c
.A OID ).
This clause allows other fields to be additional keys.
Moreover, the
.q "using operator"
part of the clause allows the user to specify what operator should
be used for the uniqueness test.
For example, integers are all unique if = is used for
the check, but not if < is used instead.
If no operator is specified, = is used by default.
Any specified operator must be a binary operator returning a boolean.
If there is no compatible index to allow the key clause to be
rapidly checked, \*(PP defaults to not checking
rather than performing an exhaustive search on each key update.
.lp
The
\fIinherits\fR
clause specifies a collection of class names
from which this class automatically inherits all fields.
If any inherited field name appears more than once,
\*(PP reports an error.
Moreover,
\*(PP automatically allows the created class to inherit
functions on classes above it in the
inheritance hierarchy.
Inheritance of functions is done according to the conventions of the
Common Lisp Object System (CLOS).
.lp
In addition,
.i classname 
is automatically created as a type.  Therefore, one or more instances 
from the class are automatically a type and can be used in other create statements. 
See 
.b introduction
(commands) for a further discussion of this point.
.lp
The class is created as a heap with
no initial data.
A class can have no more than 1600 domains,
but this limit may be configured lower at some sites.
A class cannot have the same name as
a system catalog class.
.lp
The archive specification for each class can be one of:
.(l
none:	no historical access is supported
light:	historical access is allowed and optimized for light update activity
heavy:	historical access is allowed and optimized for heavy update activity
.)l
For details of the optimization, see
[STON87].
Once the archive status is set, there is no way to change it.
See the 
.b purge
(commands) command for details on specifying how much history
is kept.
.uh EXAMPLE
.lp
.nf
/* Create class emp with attributes name, sal and bdate */

   create emp (name = char16, salary = float4, bdate = abstime)
.lp
.nf
/* Create class permemp with pension information inheriting
   all fields of emp */

   create permemp (plan = char16)
   inherits emp
.fi
.uh "SEE ALSO"
.lp
destroy(commands)
.uh BUGS
.lp
Key and archive_mode are not implemented in Version 2.1.
