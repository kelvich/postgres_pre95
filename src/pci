#!/bin/sh
#
#	pci -- postgres checkin command
#
#	this script should be used to check in changes made in a
#	developer's private copy of the postgres tree.  it will
#	run the rcs checkin command, and then guarantee that the
#	source file is checked out in the postgres master tree.
#
#	Usage:  pci [-v] [-M master_tree_pathname] <ci flags> file file ...
#
#		-v puts pci into verbose mode
#		-M tells pci to use master_tree_pathname as the root of
#		   the postgres master tree
#
#	$Header$
#

# control the behavior of this script
verbose=0
master=/usr/local/devel/postgres
M=
getmaster=0

ulf=
msgs=
files=

# parse the argument list
while [ $# -gt 0 ]
do
	case $1 in
	-v)		verbose=1;;
	-M)		master=$2;shift;;
	-M*)		master=`echo $2 | sed -e "s/-M//"`;;
	-[ulf])		ulf="$ulf $1";;
	-[mnNst])	msgs="$msgs $1 ""'""$2""'";shift;;
	-[mnNs]t*)	msgs="$msgs ""'""$1""'";;
	*)		files="$files $1";;
	esac
	shift
done

# tell them what they've won, don pardo...
if [ $verbose -ne 0 ]
then
	echo ci $ulf $msgs $files
fi

ci $ulf $msgs $files

if [ $? -ne 0 ]
then
	echo checkin failed.
	exit 1
fi

curdir=`pwd`

# extract the pathname relative to the postgres root directory from curdir
subtree=`echo $curdir | sed -e "s%.\*/src/%%"`

if [ $verbose -ne 0 ]
then
	echo cd $master/src/$subdir
fi

cd $master/src/$subdir
if [ $? -ne 0 ]
then
	echo cannot chdir to $master/src/$subdir
	echo checkout of $files in master tree failed
	echo please do the checkout manually
	exit 1
fi

if [ $verbose -ne 0 ]
then
	echo co $files
fi

co $files

exit 0
